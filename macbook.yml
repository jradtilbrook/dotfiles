#! /usr/bin/env ansible-playbook

## ---------------------------------------------------
## macOS ansible playbook for setting up a new machine
## ---------------------------------------------------
---
- name: Playbook for setting up a new mac
  hosts: localhost

  vars_files:
    - vars/vault.yml # stores secure variables
    - vars/defaults.yml  # default variables

  handlers:
    - name: restart dock
      command: killall Dock

  tasks:
    ## -----------------------------------------------
    ## Include vars_file for overriding default values
    ## -----------------------------------------------
    - name: include override vars_file (if it exists)
      tags: always
      include_vars: "{{ item }}"
      with_first_found:
        - files:
            - vars/override.yml
          skip: true # don't error if not found


    ## ----------------------
    ## Homebrew related tasks
    ## ----------------------
    - name: install homebrew taps
      tags: brew
      homebrew_tap:
        tap: "{{ item }}"
      with_items: "{{ homebrew_taps }}"

    - name: install apps with homebrew-cask
      tags: brew
      homebrew_cask:
        cask: "{{ item }}"
        update_homebrew: yes
      with_items: "{{ homebrew_casks }}"

    - name: install packages with homebrew
      tags: brew
      homebrew:
        name: "{{ item }}"
        update_homebrew: yes
      with_items: "{{ homebrew_formulae }}"


    ## ------------------------------
    ## Atom packages and config files
    ## ------------------------------
    - name: install atom packages
      tags: atom
      shell: apm install {{ item }}
      args:
        creates: "{{ ansible_user_dir }}/.atom/packages/{{ item }}"
      with_items: "{{ atom_packages }}"


    ## ---------------------
    ## SSH key configuration
    ## ---------------------
    - name: create ssh key
      tags: ssh
      shell: >
        ssh-keygen -t rsa -b 4096 \
        -C "{{ ansible_hostname | regex_replace('-|_', ' ') }}" \
        -f "{{ ansible_user_dir }}/.ssh/id_rsa"
      args:
        creates: "{{ ansible_user_dir }}/.ssh/id_rsa"
      register: ssh_key

    - name: print ssh public key to upload to bitbucket
      tags: ssh
      debug:
        msg: "{{ lookup('file', '{{ ansible_user_dir }}/.ssh/id_rsa.pub') }}"
      when: ssh_key | changed

    - name: add ssh key to keychain
      tags: ssh
      shell: ssh-add -K {{ ansible_user_dir }}/.ssh/id_rsa
      when: ssh_key | changed

    - name: upload key to github (through api)
      tags: ssh
      github_key:
        name: "{{ ansible_hostname | regex_replace('-|_', ' ') }}"
        pubkey: "{{ lookup('file', '{{ ansible_user_dir }}/.ssh/id_rsa.pub') }}"
        token: "{{ vault_github_api_token }}"
        force: no
      when: ssh_key | changed


    ## -------------------
    ## Configuration files
    ## -------------------
    # - name: export environment variables

    - name: find dotfiles to link
      tags: dotfiles
      find:
        paths: files/
        recurse: yes
      register: files

    - name: find templates to import
      tags: dotfiles
      find:
        paths: templates/
        recurse: yes
      register: templates

    - name: link dotfiles to home directory
      tags: dotfiles
      file:
        src: "{{ item.path | realpath }}"
        dest: "{{ ansible_user_dir }}/.{{ item.path | relpath('files') }}"
        state: link
      with_items: "{{ files.files }}"

    - name: import dotfile templates to home directory
      tags: dotfiles
      template:
        src: "{{ item.path }}"
        dest: "{{ ansible_user_dir }}/\
          .{{ item.path | relpath('templates') | splitext | first }}"
        backup: yes
      with_items: "{{ templates.files }}"


    ## -----------------
    ## Vim configuration
    ## -----------------
    - name: clone Vundle.vim for plugin management in vim
      tags: vim
      git:
        repo: git://github.com/VundleVim/Vundle.vim.git
        dest: "{{ ansible_user_dir }}/.vim/bundle/Vundle.vim"
        update: no

    - name: install plugins with vundle
      tags: vim
      shell: >
        BEF=`ls ~/.vim/bundle/ | wc -l`; vim +PluginInstall +qa; \
        AFT=`ls ~/.vim/bundle | wc -l`; exit $(($AFT-$BEF))
      register: vundle
      changed_when: vundle.rc > 0
      failed_when: false # this shouldn't ever actually fail


    ## ----------
    ## Dock items
    ## ----------
    - name: find current dock items
      tags: dock
      shell: dockutil --list | sed 's/\(.*\)[[:blank:]]file:.*/\1/'
      register: current_dock
      changed_when: false

    - name: remove unnecessary dock items
      tags: dock
      shell: dockutil --remove "{{ item }}" --no-restart
      with_items: "{{ current_dock.stdout_lines }}"
      when: item not in (dock_items | map(attribute='name') | list)
      notify: restart dock

    - name: add/rearrange dock items
      tags: dock
      shell: >
        [ "`dockutil --find "{{ item.name }}" | \
          sed -n 's/.*slot \\([[:digit:]]*\\).*/\\1/p'`" -eq {{ item.pos }} ] \
          2> /dev/null || \
        ( \
          dockutil --find "{{ item.name }}" > /dev/null && \
          dockutil --move "{{ item.name }}" --position {{ item.pos }} \
            --no-restart  && \
          echo changed
        ) || \
        ( \
          dockutil --add "/Applications/{{ item.name }}.app" \
            --position {{ item.pos }} --no-restart && \
          echo changed \
        )
      with_items: "{{ dock_items }}"
      register: dock_change
      changed_when: '"changed" in "{{ dock_change.stdout }}"'
      notify: restart dock
